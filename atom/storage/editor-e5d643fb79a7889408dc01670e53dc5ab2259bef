{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":774},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/will/Documents/workspace/nodenv","buffers":[{"text":"#!/usr/bin/env bash\nset -e\nexport -n CDPATH\n\nif [ \"$1\" = \"--debug\" ]; then\n  export NODENV_DEBUG=1\n  shift\nfi\n\nif [ -n \"$NODENV_DEBUG\" ]; then\n  export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '\n  set -x\nfi\n\nREADLINK=$(type -p greadlink readlink | head -1)\nif [ -z \"$READLINK\" ]; then\n  echo \"nodenv: cannot find readlink - are you missing GNU coreutils?\" >&2\n  exit 1\nfi\n\nresolve_link() {\n  $READLINK \"$1\"\n}\n\nabs_dirname() {\n  local cwd=\"$(pwd)\"\n  local path=\"$1\"\n\n  while [ -n \"$path\" ]; do\n    cd \"${path%/*}\"\n    local name=\"${path##*/}\"\n    path=\"$(resolve_link \"$name\" || true)\"\n  done\n\n  pwd\n  cd \"$cwd\"\n}\n\nif [ -z \"${NODENV_ROOT}\" ]; then\n  NODENV_ROOT=\"${HOME}/.nodenv\"\nelse\n  NODENV_ROOT=\"${NODENV_ROOT%/}\"\nfi\nexport NODENV_ROOT\n\nif [ -z \"${NODENV_DIR}\" ]; then\n  NODENV_DIR=\"$(pwd)\"\nelse\n  cd \"$NODENV_DIR\" 2>/dev/null || {\n    echo \"nodenv: cannot change working directory to \\`$NODENV_DIR'\"\n    exit 1\n  } >&2\n  NODENV_DIR=\"$(pwd)\"\n  cd \"$OLDPWD\"\nfi\nexport NODENV_DIR\n\n\nshopt -s nullglob\n\nbin_path=\"$(abs_dirname \"$0\")\"\nfor plugin_bin in \"${NODENV_ROOT}/plugins/\"*/bin; do\n  bin_path=\"${bin_path}:${plugin_bin}\"\ndone\nexport PATH=\"${bin_path}:${PATH}\"\n\nhook_path=\"${NODENV_HOOK_PATH}:${NODENV_ROOT}/nodenv.d:/usr/local/etc/nodenv.d:/etc/nodenv.d:/usr/lib/nodenv/hooks\"\nfor plugin_hook in \"${NODENV_ROOT}/plugins/\"*/etc/nodenv.d; do\n  hook_path=\"${hook_path}:${plugin_hook}\"\ndone\nexport NODENV_HOOK_PATH=\"$hook_path\"\n\nshopt -u nullglob\n\n\ncommand=\"$1\"\ncase \"$command\" in\n\"\" | \"-h\" | \"--help\" )\n  echo -e \"$(nodenv---version)\\n$(nodenv-help)\" >&2\n  ;;\n\"-v\" )\n  exec nodenv---version\n  ;;\n* )\n  command_path=\"$(command -v \"nodenv-$command\" || true)\"\n  if [ -z \"$command_path\" ]; then\n    echo \"nodenv: no such command \\`$command'\" >&2\n    exit 1\n  fi\n\n  shift 1\n  exec \"$command_path\" \"$@\"\n  ;;\nesac\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":44,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/nodenv/libexec/nodenv","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2aca9e0c163d4a4ccbac383ceda43f5bd4053352","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env bash\n# Summary: Display the version of nodenv\n#\n# Displays the version number of this nodenv release, including the\n# current revision from git, if available.\n#\n# The format of the git revision is:\n#   <version>-<num_commits>-<git_sha>\n# where `num_commits` is the number of commits since `version` was\n# tagged.\n\nset -e\n[ -n \"$NODENV_DEBUG\" ] && set -x\n\nversion=\"0.2.0\"\n\nif cd \"$NODENV_ROOT\" 2>/dev/null; then\n  git_revision=\"$(git describe --tags HEAD 2>/dev/null || true)\"\n  git_revision=\"${git_revision#v}\"\nfi\n\necho \"nodenv ${git_revision:-$version}\"\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":46,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/nodenv/libexec/nodenv---version","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6275a6da3ec3af4cf8d9bc19a35bfa2cfd4679b6","deserializer":"TextBuffer"},{"text":"# Groom your app’s Node environment with nodenv.\n\nUse nodenv to pick a Node version for your application and guarantee\nthat your development environment matches production. Put nodenv to work\nwith [Bundler](http://gembundler.com/) for painless Node upgrades and\nbulletproof deployments.\n\n**Powerful in development.** Specify your app's Node version once,\n  in a single file. Keep all your teammates on the same page. No\n  headaches running apps on different versions of Node. Just Works™\n  from the command line. Override the Node version anytime: just set\n  an environment variable.\n\n**Rock-solid in production.** Your application's executables are its\n  interface with ops. With nodenv and you'll never again need to `cd`\n  in a cron job or Chef recipe to ensure you've selected the right runtime.\n  The Node version dependency lives in one place—your app—so upgrades and\n  rollbacks are atomic, even when you switch versions.\n\n**One thing well.** nodenv is concerned solely with switching Node\n  versions. It's simple and predictable. A rich plugin ecosystem lets\n  you tailor it to suit your needs. Compile your own Node versions, or\n  use the [node-build][]\n  plugin to automate the process. Specify per-application environment\n  variables with [nodenv-vars](https://github.com/OiNutter/nodenv-vars).\n  See more [plugins on the\n  wiki](https://github.com/OiNutter/nodenv/wiki/Plugins).\n\n## Table of Contents\n\n* [How It Works](#how-it-works)\n  * [Understanding PATH](#understanding-path)\n  * [Understanding Shims](#understanding-shims)\n  * [Choosing the Node Version](#choosing-the-node-version)\n  * [Locating the Node Installation](#locating-the-node-installation)\n* [Installation](#installation)\n  * [Basic GitHub Checkout](#basic-github-checkout)\n    * [Upgrading](#upgrading)\n  * [Homebrew on Mac OS X](#homebrew-on-mac-os-x)\n  * [How nodenv hooks into your shell](#how-nodenv-hooks-into-your-shell)\n  * [Installing Node Versions](#installing-node-versions)\n  * [Uninstalling Node Versions](#uninstalling-node-versions)\n* [Command Reference](#command-reference)\n  * [nodenv local](#nodenv-local)\n  * [nodenv global](#nodenv-global)\n  * [nodenv shell](#nodenv-shell)\n  * [nodenv versions](#nodenv-versions)\n  * [nodenv version](#nodenv-version)\n  * [nodenv rehash](#nodenv-rehash)\n  * [nodenv which](#nodenv-which)\n  * [nodenv whence](#nodenv-whence)\n* [Development](#development)\n  * [Version History](#version-history)\n  * [License](#license)\n\n## How It Works\n\nAt a high level, nodenv intercepts Node commands using shim\nexecutables injected into your `PATH`, determines which Node version\nhas been specified by your application, and passes your commands along\nto the correct Node installation.\n\n### Understanding PATH\n\nWhen you run a command like `node` or `npm`, your operating system\nsearches through a list of directories to find an executable file with\nthat name. This list of directories lives in an environment variable\ncalled `PATH`, with each directory in the list separated by a colon:\n\n    /usr/local/bin:/usr/bin:/bin\n\nDirectories in `PATH` are searched from left to right, so a matching\nexecutable in a directory at the beginning of the list takes\nprecedence over another one at the end. In this example, the\n`/usr/local/bin` directory will be searched first, then `/usr/bin`,\nthen `/bin`.\n\n### Understanding Shims\n\nnodenv works by inserting a directory of _shims_ at the front of your\n`PATH`:\n\n    ~/.nodenv/shims:/usr/local/bin:/usr/bin:/bin\n\nThrough a process called _rehashing_, nodenv maintains shims in that\ndirectory to match every Node command across every installed version\nof Node—`node`, `npm`, and so on.\n\nShims are lightweight executables that simply pass your command along\nto nodenv. So with nodenv installed, when you run, say, `npm`, your\noperating system will do the following:\n\n* Search your `PATH` for an executable file named `npm`\n* Find the nodenv shim named `npm` at the beginning of your `PATH`\n* Run the shim named `npm`, which in turn passes the command along to\n  nodenv\n\n### Choosing the Node Version\n\nWhen you execute a shim, nodenv determines which Node version to use by\nreading it from the following sources, in this order:\n\n1. The `NODENV_VERSION` environment variable, if specified. You can use\n   the [`nodenv shell`](#nodenv-shell) command to set this environment\n   variable in your current shell session.\n\n2. The first `.node-version` file found by searching the directory of the\n   script you are executing and each of its parent directories until reaching\n   the root of your filesystem.\n\n3. The first `.node-version` file found by searching the current working\n   directory and each of its parent directories until reaching the root of your\n   filesystem. You can modify the `.node-version` file in the current working\n   directory with the [`nodenv local`](#nodenv-local) command.\n\n4. The global `~/.nodenv/version` file. You can modify this file using\n   the [`nodenv global`](#nodenv-global) command. If the global version\n   file is not present, nodenv assumes you want to use the \"system\"\n   Node—i.e. whatever version would be run if nodenv weren't in your\n   path.\n\n### Locating the Node Installation\n\nOnce nodenv has determined which version of Node your application has\nspecified, it passes the command along to the corresponding Node\ninstallation.\n\nEach Node version is installed into its own directory under\n`~/.nodenv/versions`. For example, you might have these versions\ninstalled:\n\n* `~/.nodenv/versions/1.8.7-p371/`\n* `~/.nodenv/versions/1.9.3-p327/`\n* `~/.nodenv/versions/jnode-1.7.1/`\n\nVersion names to nodenv are simply the names of the directories in\n`~/.nodenv/versions`.\n\n## Installation\n\nIf you're on Mac OS X, consider\n[installing with Homebrew](#homebrew-on-mac-os-x).\n\n### Basic GitHub Checkout\n\nThis will get you going with the latest version of nodenv and make it\neasy to fork and contribute any changes back upstream.\n\n1. Check out nodenv into `~/.nodenv`.\n\n    ~~~ sh\n    $ git clone https://github.com/OiNutter/nodenv.git ~/.nodenv\n    ~~~\n\n2. Add `~/.nodenv/bin` to your `$PATH` for access to the `nodenv`\n   command-line utility.\n\n    ~~~ sh\n    $ echo 'export PATH=\"$HOME/.nodenv/bin:$PATH\"' >> ~/.bash_profile\n    ~~~\n\n    **Ubuntu Desktop note**: Modify your `~/.bashrc` instead of `~/.bash_profile`.\n\n    **Zsh note**: Modify your `~/.zshrc` file instead of `~/.bash_profile`.\n\n3. Add `nodenv init` to your shell to enable shims and autocompletion.\n\n    ~~~ sh\n    $ echo 'eval \"$(nodenv init -)\"' >> ~/.bash_profile\n    ~~~\n\n    _Same as in previous step, use `~/.bashrc` on Ubuntu, or `~/.zshrc` for Zsh._\n\n4. Restart your shell so that PATH changes take effect. (Opening a new\n   terminal tab will usually do it.) Now check if nodenv was set up:\n\n    ~~~ sh\n    $ type nodenv\n    #=> \"nodenv is a function\"\n    ~~~\n\n5. _(Optional)_ Install [node-build][], which provides the\n   `nodenv install` command that simplifies the process of\n   [installing new Node versions](#installing-node-versions).\n\n#### Upgrading\n\nIf you've installed nodenv manually using git, you can upgrade your\ninstallation to the cutting-edge version at any time.\n\n~~~ sh\n$ cd ~/.nodenv\n$ git pull\n~~~\n\nTo use a specific release of nodenv, check out the corresponding tag:\n\n~~~ sh\n$ cd ~/.nodenv\n$ git fetch\n$ git checkout v0.3.0\n~~~\n\nIf you've [installed via Homebrew](#homebrew-on-mac-os-x), then upgrade\nvia its `brew` command:\n\n~~~ sh\n$ brew update\n$ brew upgrade nodenv node-build\n~~~\n\n### Homebrew on Mac OS X\n\nAs an alternative to installation via GitHub checkout, you can install\nnodenv and [node-build][] using the [Homebrew](http://brew.sh) package\nmanager on Mac OS X:\n\n~~~\n$ brew update\n$ brew install nodenv node-build\n~~~\n\nAfterwards you'll still need to add `eval \"$(nodenv init -)\"` to your\nprofile as stated in the caveats. You'll only ever have to do this\nonce.\n\n### How nodenv hooks into your shell\n\nSkip this section unless you must know what every line in your shell\nprofile is doing.\n\n`nodenv init` is the only command that crosses the line of loading\nextra commands into your shell. Here's what `nodenv init` actually does:\n\n1. Sets up your shims path. This is the only requirement for nodenv to\n   function properly. You can do this by hand by prepending\n   `~/.nodenv/shims` to your `$PATH`.\n\n2. Installs autocompletion. This is entirely optional but pretty\n   useful. Sourcing `~/.nodenv/completions/nodenv.bash` will set that\n   up. There is also a `~/.nodenv/completions/nodenv.zsh` for Zsh\n   users.\n\n3. Rehashes shims. From time to time you'll need to rebuild your\n   shim files. Doing this automatically makes sure everything is up to\n   date. You can always run `nodenv rehash` manually.\n\n4. Installs the sh dispatcher. This bit is also optional, but allows\n   nodenv and plugins to change variables in your current shell, making\n   commands like `nodenv shell` possible. The sh dispatcher doesn't do\n   anything crazy like override `cd` or hack your shell prompt, but if\n   for some reason you need `nodenv` to be a real script rather than a\n   shell function, you can safely skip it.\n\nRun `nodenv init -` for yourself to see exactly what happens under the\nhood.\n\n### Installing Node Versions\n\nThe `nodenv install` command doesn't ship with nodenv out of the box, but\nis provided by the [node-build][] project. If you installed it either\nas part of GitHub checkout process outlined above or via Homebrew, you\nshould be able to:\n\n~~~ sh\n# list all available versions:\n$ nodenv install -l\n\n# install a Node version:\n$ nodenv install 0.10.26\n~~~\n\nAlternatively to the `install` command, you can download and compile\nNode manually as a subdirectory of `~/.nodenv/versions/`. An entry in\nthat directory can also be a symlink to a Node version installed\nelsewhere on the filesystem. nodenv doesn't care; it will simply treat\nany entry in the `versions/` directory as a separate Node version.\n\n### Uninstalling Node Versions\n\nAs time goes on, Node versions you install will accumulate in your\n`~/.nodenv/versions` directory.\n\nTo remove old Node versions, simply `rm -rf` the directory of the\nversion you want to remove. You can find the directory of a particular\nNode version with the `nodenv prefix` command, e.g. `nodenv prefix\n0.8.22`.\n\nThe [node-build][] plugin provides an `nodenv uninstall` command to\nautomate the removal process.\n\n## Command Reference\n\nLike `git`, the `nodenv` command delegates to subcommands based on its\nfirst argument. The most common subcommands are:\n\n### nodenv local\n\nSets a local application-specific Node version by writing the version\nname to a `.node-version` file in the current directory. This version\noverrides the global version, and can be overridden itself by setting\nthe `NODENV_VERSION` environment variable or with the `nodenv shell`\ncommand.\n\n    $ nodenv local 0.10.0\n\nWhen run without a version number, `nodenv local` reports the currently\nconfigured local version. You can also unset the local version:\n\n    $ nodenv local --unset\n\nPrevious versions of nodenv stored local version specifications in a\nfile named `.nodenv-version`. For backwards compatibility, nodenv will\nread a local version specified in an `.nodenv-version` file, but a\n`.node-version` file in the same directory will take precedence.\n\n### nodenv global\n\nSets the global version of Node to be used in all shells by writing\nthe version name to the `~/.nodenv/version` file. This version can be\noverridden by an application-specific `.node-version` file, or by\nsetting the `NODENV_VERSION` environment variable.\n\n    $ nodenv global 0.10.26\n\nThe special version name `system` tells nodenv to use the system Node\n(detected by searching your `$PATH`).\n\nWhen run without a version number, `nodenv global` reports the\ncurrently configured global version.\n\n### nodenv shell\n\nSets a shell-specific Node version by setting the `NODENV_VERSION`\nenvironment variable in your shell. This version overrides\napplication-specific versions and the global version.\n\n    $ nodenv shell 0.11.11\n\nWhen run without a version number, `nodenv shell` reports the current\nvalue of `NODENV_VERSION`. You can also unset the shell version:\n\n    $ nodenv shell --unset\n\nNote that you'll need nodenv's shell integration enabled (step 3 of\nthe installation instructions) in order to use this command. If you\nprefer not to use shell integration, you may simply set the\n`NODENV_VERSION` variable yourself:\n\n    $ export NODENV_VERSION=0.10.26\n\n### nodenv versions\n\nLists all Node versions known to nodenv, and shows an asterisk next to\nthe currently active version.\n\n    $ nodenv versions\n      0.8.22\n      0.9.12\n      * 0.10.0 (set by /Users/will/.nodenv/version)\n\n### nodenv version\n\nDisplays the currently active Node version, along with information on\nhow it was set.\n\n    $ nodenv version\n    0.10.0 (set by /Volumes/OiNutter/hubot/.node-version)\n\n### nodenv rehash\n\nInstalls shims for all Node executables known to nodenv (i.e.,\n`~/.nodenv/versions/*/bin/*`). Run this command after you install a new\nversion of Node, or install a gem that provides commands.\n\n    $ nodenv rehash\n\n### nodenv which\n\nDisplays the full path to the executable that nodenv will invoke when\nyou run the given command.\n\n    $ nodenv which npm\n    /Users/will/.nodenv/versions/0.10.26/bin/npm\n\n### nodenv whence\n\nLists all Node versions with the given command installed.\n\n    $ nodenv whence npm\n    0.10.0\n    0.9.12\n    0.8.22\n\n## Development\n\nThe nodenv source code is [hosted on\nGitHub](https://github.com/OiNutter/nodenv). It's clean, modular,\nand easy to understand, even if you're not a shell hacker.\n\nTests are executed using [Bats](https://github.com/sstephenson/bats):\n\n    $ bats test\n    $ bats test/<file>.bats\n\nPlease feel free to submit pull requests and file bugs on the [issue\ntracker](https://github.com/OiNutter/nodenv/issues).\n\n### Credits\n\nCopied from [rbenv](https://github.com/sstephenson/rbenv) and modified to work for node.\n\n### Version History\n\n**0.2.0** (April 18, 2014)\n\n* Updated to match latest version of [rbenv](https://github.com/sstephenson/rbenv). See there for\nchangelog.\n\n**0.1.0** (March 18, 2013)\n\n* Initial public release. Copied from [rbenv](https://github.com/sstephenson/rbenv)\n\n### License\n\n(The MIT license)\n\nCopyright (c) 2013 Will McKenzie\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n  [node-build]: https://github.com/OiNutter/node-build#readme\n","markers":{"markers":{"1":{"id":1,"range":[[381,0],[381,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":91,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/nodenv/README.md","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a074e8dc1de8352cc1b9d9fc6cebc2598f10dc7b","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env bats\n\nload test_helper\n\ncreate_executable() {\n  local bin=\"${NODENV_ROOT}/versions/${1}/bin\"\n  mkdir -p \"$bin\"\n  touch \"${bin}/$2\"\n  chmod +x \"${bin}/$2\"\n}\n\n@test \"finds versions where present\" {\n  create_executable \"1.8\" \"node\"\n  create_executable \"1.8\" \"npm\"\n  create_executable \"2.0\" \"node\"\n\n  run nodenv-whence node\n  assert_success\n  assert_output <<OUT\n1.8\n2.0\nOUT\n\n  run nodenv-whence npm\n  assert_success \"1.8\"\n\n}\n","markers":{"markers":{"1":{"id":1,"range":[[25,0],[25,0]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":138,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[15,2],[15,31]],"newRange":[[15,2],[15,2]],"oldText":"create_executable \"2.0\" \"npm\"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[15,2],[15,2]]},"newParams":{"range":[[15,1],[15,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[15,1],[15,2]],"newRange":[[15,1],[15,1]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[15,1],[15,1]]},"newParams":{"range":[[15,0],[15,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[15,0],[15,1]],"newRange":[[15,0],[15,0]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[15,0],[15,0]]},"newParams":{"range":[[14,32],[15,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[14,32],[15,0]],"newRange":[[14,32],[14,32]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[26,2],[27,22]],"newRange":[[26,2],[26,2]],"oldText":"run nodenv-whence npm\n  assert_success \"2.0\"","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[26,2],[26,2]]},"newParams":{"range":[[26,1],[26,2]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,1],[26,2]],"newRange":[[26,1],[26,1]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[26,1],[26,1]]},"newParams":{"range":[[26,0],[26,1]]},"deserializer":"MarkerPatch"},{"oldRange":[[26,0],[26,1]],"newRange":[[26,0],[26,0]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[26,0],[26,0]]},"newParams":{"range":[[25,0],[26,0]]},"deserializer":"MarkerPatch"},{"oldRange":[[25,0],[26,0]],"newRange":[[25,0],[25,0]],"oldText":"\n","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/nodenv/test/whence.bats","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"407ee14c30e45bc75dce2f50a9b08536742ba278","deserializer":"TextBuffer"},{"text":"#!/usr/bin/env bats\n\nload test_helper\n\ncreate_executable() {\n  local bin\n  if [[ $1 == */* ]]; then bin=\"$1\"\n  else bin=\"${NODENV_ROOT}/versions/${1}/bin\"\n  fi\n  mkdir -p \"$bin\"\n  touch \"${bin}/$2\"\n  chmod +x \"${bin}/$2\"\n}\n\n@test \"outputs path to executable\" {\n  create_executable \"1.8\" \"node\"\n  create_executable \"2.0\" \"npm\"\n\n  NODENV_VERSION=1.8 run nodenv-which node\n  assert_success \"${NODENV_ROOT}/versions/1.8/bin/node\"\n\n  NODENV_VERSION=2.0 run nodenv-which npm\n  assert_success \"${NODENV_ROOT}/versions/2.0/bin/npm\"\n}\n\n@test \"searches PATH for system version\" {\n  create_executable \"${NODENV_TEST_DIR}/bin\" \"kill-all-humans\"\n  create_executable \"${NODENV_ROOT}/shims\" \"kill-all-humans\"\n\n  NODENV_VERSION=system run nodenv-which kill-all-humans\n  assert_success \"${NODENV_TEST_DIR}/bin/kill-all-humans\"\n}\n\n@test \"version not installed\" {\n  create_executable \"2.0\" \"npm\"\n  NODENV_VERSION=1.9 run nodenv-which npm\n  assert_failure \"nodenv: version \\`1.9' is not installed\"\n}\n\n@test \"no executable found\" {\n  create_executable \"1.8\" \"npm\"\n  NODENV_VERSION=1.8 run nodenv-which node\n  assert_failure \"nodenv: node: command not found\"\n}\n\n@test \"executable found in other versions\" {\n  create_executable \"1.8\" \"node\"\n  create_executable \"1.9\" \"npm\"\n  create_executable \"2.0\" \"npm\"\n\n  NODENV_VERSION=1.8 run nodenv-which npm\n  assert_failure\n  assert_output <<OUT\nnodenv: npm: command not found\n\nThe \\`npm' command exists in these Node versions:\n  1.9\n  2.0\nOUT\n}\n\n@test \"carries original IFS within hooks\" {\n  hook_path=\"${NODENV_TEST_DIR}/nodenv.d\"\n  mkdir -p \"${hook_path}/which\"\n  cat > \"${hook_path}/which/hello.bash\" <<SH\nhellos=(\\$(printf \"hello\\\\tugly world\\\\nagain\"))\necho HELLO=\"\\$(printf \":%s\" \"\\${hellos[@]}\")\"\nexit\nSH\n\n  NODENV_HOOK_PATH=\"$hook_path\" IFS=$' \\t\\n' run nodenv-which anything\n  assert_success\n  assert_output \"HELLO=:hello:ugly:world:again\"\n}\n","markers":{"markers":{"1":{"id":1,"range":[[43,1],[43,1]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":140,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[41,38],[41,41]]},"newParams":{"tailed":false,"range":[[41,41],[41,41]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,38],[41,41]],"newRange":[[41,38],[41,39]],"oldText":"npm","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,39],[41,39]],"newRange":[[41,39],[41,40]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,40],[41,40]],"newRange":[[41,40],[41,41]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,41],[41,41]],"newRange":[[41,41],[41,42]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,42],[41,42]],"newRange":[[41,42],[41,43]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[41,43],[41,43]]},"newParams":{"reversed":true,"range":[[41,42],[41,43]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,42],[41,43]],"newRange":[[41,42],[41,42]],"oldText":"c","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[41,42],[41,42]]},"newParams":{"range":[[41,41],[41,42]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,41],[41,42]],"newRange":[[41,41],[41,41]],"oldText":"e","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[41,41],[41,41]]},"newParams":{"range":[[41,40],[41,41]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,40],[41,41]],"newRange":[[41,40],[41,40]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,40],[41,40]],"newRange":[[41,40],[41,41]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,41],[41,41]],"newRange":[[41,41],[41,42]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[41,42],[41,42]]},"newParams":{"range":[[41,41],[41,42]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,41],[41,42]],"newRange":[[41,41],[41,41]],"oldText":"p","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[41,41],[41,41]]},"newParams":{"range":[[41,40],[41,41]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,40],[41,41]],"newRange":[[41,40],[41,40]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[41,40],[41,40]]},"newParams":{"range":[[41,39],[41,40]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,39],[41,40]],"newRange":[[41,39],[41,39]],"oldText":"p","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,39],[41,39]],"newRange":[[41,39],[41,40]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,40],[41,40]],"newRange":[[41,40],[41,41]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,41],[41,41]],"newRange":[[41,41],[41,42]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,42],[41,42]],"newRange":[[41,42],[41,43]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[42,26],[42,29]]},"newParams":{"tailed":false,"range":[[42,29],[42,29]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,26],[42,29]],"newRange":[[42,26],[42,27]],"oldText":"npm","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,27],[42,27]],"newRange":[[42,27],[42,28]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,28],[42,28]],"newRange":[[42,28],[42,29]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,29],[42,29]],"newRange":[[42,29],[42,30]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,30],[42,30]],"newRange":[[42,30],[42,31]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[41,38],[41,43]]},"newParams":{"tailed":false,"range":[[41,43],[41,43]]},"deserializer":"MarkerPatch"},{"oldRange":[[41,38],[41,43]],"newRange":[[41,38],[41,39]],"oldText":"rspec","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,39],[41,39]],"newRange":[[41,39],[41,40]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,40],[41,40]],"newRange":[[41,40],[41,41]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[41,41],[41,41]],"newRange":[[41,41],[41,42]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":true,"range":[[42,26],[42,31]]},"newParams":{"tailed":false,"range":[[42,31],[42,31]]},"deserializer":"MarkerPatch"},{"oldRange":[[42,26],[42,31]],"newRange":[[42,26],[42,27]],"oldText":"rspec","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,27],[42,27]],"newRange":[[42,27],[42,28]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,28],[42,28]],"newRange":[[42,28],[42,29]],"oldText":"","newText":"d","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[42,29],[42,29]],"newRange":[[42,29],[42,30]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/nodenv/test/which.bats","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"7ad75a31ded607695290ccc13cbf721234364f08","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":44,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":45,"softWrap":false,"editorWidthInChars":115,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/nodenv/libexec/nodenv","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":46,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":47,"softWrap":false,"editorWidthInChars":110,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/nodenv/libexec/nodenv---version","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":91,"softTabs":true,"scrollTop":5812,"scrollLeft":0,"displayBuffer":{"id":92,"softWrap":false,"editorWidthInChars":146,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/nodenv/README.md","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":138,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":139,"softWrap":false,"editorWidthInChars":152,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/nodenv/test/whence.bats","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":140,"softTabs":true,"scrollTop":234,"scrollLeft":0,"displayBuffer":{"id":141,"softWrap":false,"editorWidthInChars":152,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/nodenv/test/which.bats","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/will/Documents/workspace/nodenv/test/which.bats","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/will/Documents/workspace/nodenv/libexec/nodenv":1397832693864,"/Users/will/Documents/workspace/nodenv/libexec/nodenv---version":1397832480319,"/Users/will/Documents/workspace/nodenv/README.md":1397841887634,"/Users/will/Documents/workspace/nodenv/test/whence.bats":1397841967506,"/Users/will/Documents/workspace/nodenv/test/which.bats":1397842024460},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":145640255},"tree-view":{"directoryExpansionStates":{"bin":{},"libexec":{}},"selectedPath":"/Users/will/Documents/workspace/nodenv/test","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}