{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":774},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/will/Documents/workspace/UglifyJS2","buffers":[{"text":"var path = require(\"path\");\nvar fs = require(\"fs\");\nvar vm = require(\"vm\");\nvar sys = require(\"util\");\n\nvar UglifyJS = vm.createContext({\n    sys           : sys,\n    console       : console,\n    MOZ_SourceMap : require(\"source-map\")\n});\n\nfunction load_global(file) {\n    file = path.resolve(path.dirname(module.filename), file);\n    try {\n        var code = fs.readFileSync(file, \"utf8\");\n        return vm.runInContext(code, UglifyJS, file);\n    } catch(ex) {\n        // XXX: in case of a syntax error, the message is kinda\n        // useless. (no location information).\n        sys.debug(\"ERROR in file: \" + file + \" / \" + ex);\n        process.exit(1);\n    }\n};\n\nvar FILES = exports.FILES = [\n    \"../lib/utils.js\",\n    \"../lib/ast.js\",\n    \"../lib/parse.js\",\n    \"../lib/transform.js\",\n    \"../lib/scope.js\",\n    \"../lib/output.js\",\n    \"../lib/compress.js\",\n    \"../lib/sourcemap.js\",\n    \"../lib/mozilla-ast.js\"\n].map(function(file){\n    return path.join(path.dirname(fs.realpathSync(__filename)), file);\n});\n\nFILES.forEach(load_global);\n\nUglifyJS.AST_Node.warn_function = function(txt) {\n    sys.error(\"WARN: \" + txt);\n};\n\n// XXX: perhaps we shouldn't export everything but heck, I'm lazy.\nfor (var i in UglifyJS) {\n    if (UglifyJS.hasOwnProperty(i)) {\n        exports[i] = UglifyJS[i];\n    }\n}\n\nexports.minify = function(files, options) {\n    options = UglifyJS.defaults(options, {\n        spidermonkey : false,\n        outSourceMap : null,\n        sourceRoot   : null,\n        inSourceMap  : null,\n        fromString   : false,\n        warnings     : false,\n        mangle       : {},\n        output       : null,\n        compress     : {}\n    });\n    UglifyJS.base54.reset();\n\n    // 1. parse\n    var toplevel = null,\n        sourcesContent = {};\n\n    if (options.spidermonkey) {\n        toplevel = UglifyJS.AST_Node.from_mozilla_ast(files);\n    } else {\n        if (typeof files == \"string\")\n            files = [ files ];\n        files.forEach(function(file){\n            var code = options.fromString\n                ? file\n                : fs.readFileSync(file, \"utf8\");\n            sourcesContent[file] = code;\n            toplevel = UglifyJS.parse(code, {\n                filename: options.fromString ? \"?\" : file,\n                toplevel: toplevel\n            });\n        });\n    }\n\n    // 2. compress\n    if (options.compress) {\n        var compress = { warnings: options.warnings };\n        UglifyJS.merge(compress, options.compress);\n        toplevel.figure_out_scope();\n        var sq = UglifyJS.Compressor(compress);\n        toplevel = toplevel.transform(sq);\n    }\n\n    // 3. mangle\n    if (options.mangle) {\n        toplevel.figure_out_scope();\n        toplevel.compute_char_frequency();\n        toplevel.mangle_names(options.mangle);\n    }\n\n    // 4. output\n    var inMap = options.inSourceMap;\n    var output = {};\n    if (typeof options.inSourceMap == \"string\") {\n        inMap = fs.readFileSync(options.inSourceMap, \"utf8\");\n    }\n    if (options.outSourceMap) {\n        output.source_map = UglifyJS.SourceMap({\n            file: options.outSourceMap,\n            orig: inMap,\n            root: options.sourceRoot\n        });\n        if (options.sourceMapIncludeSources) {\n            for (var file in sourcesContent) {\n                if (sourcesContent.hasOwnProperty(file)) {\n                    options.source_map.get().setSourceContent(file, sourcesContent[file]);\n                }\n            }\n        }\n\n    }\n    if (options.output) {\n        UglifyJS.merge(output, options.output);\n    }\n    var stream = UglifyJS.OutputStream(output);\n    toplevel.print(stream);\n\n    if(options.outSourceMap){\n        stream += \"\\n//# sourceMappingURL=\" + options.outSourceMap;\n    }\n\n    return {\n        code : stream + \"\",\n        map  : output.source_map + \"\"\n    };\n};\n\n// exports.describe_ast = function() {\n//     function doitem(ctor) {\n//         var sub = {};\n//         ctor.SUBCLASSES.forEach(function(ctor){\n//             sub[ctor.TYPE] = doitem(ctor);\n//         });\n//         var ret = {};\n//         if (ctor.SELF_PROPS.length > 0) ret.props = ctor.SELF_PROPS;\n//         if (ctor.SUBCLASSES.length > 0) ret.sub = sub;\n//         return ret;\n//     }\n//     return doitem(UglifyJS.AST_Node).sub;\n// }\n\nexports.describe_ast = function() {\n    var out = UglifyJS.OutputStream({ beautify: true });\n    function doitem(ctor) {\n        out.print(\"AST_\" + ctor.TYPE);\n        var props = ctor.SELF_PROPS.filter(function(prop){\n            return !/^\\$/.test(prop);\n        });\n        if (props.length > 0) {\n            out.space();\n            out.with_parens(function(){\n                props.forEach(function(prop, i){\n                    if (i) out.space();\n                    out.print(prop);\n                });\n            });\n        }\n        if (ctor.documentation) {\n            out.space();\n            out.print_string(ctor.documentation);\n        }\n        if (ctor.SUBCLASSES.length > 0) {\n            out.space();\n            out.with_block(function(){\n                ctor.SUBCLASSES.forEach(function(ctor, i){\n                    out.indent();\n                    doitem(ctor);\n                    out.newline();\n                });\n            });\n        }\n    };\n    doitem(UglifyJS.AST_Node);\n    return out + \"\";\n};\n","markers":{"markers":{"1":{"id":1,"range":[[134,27],[134,27]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":23,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"11":{"id":11,"range":[[129,6],[129,27]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"12":{"id":12,"range":[[129,28],[129,29]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[{"patches":[{"oldRange":[[127,27],[127,27]],"newRange":[[127,27],[128,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[128,0]],"newRange":[[128,0],[128,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[128,4],[128,4]],"newRange":[[128,4],[129,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[129,0],[129,0]],"newRange":[[129,0],[129,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,4],[129,4]],"newRange":[[129,4],[129,5]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"reversed":false,"range":[[129,5],[129,5]]},"newParams":{"reversed":true,"range":[[129,4],[129,5]]},"deserializer":"MarkerPatch"},{"oldRange":[[129,4],[129,5]],"newRange":[[129,4],[129,4]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,4],[129,4]],"newRange":[[129,4],[129,57]],"oldText":"","newText":"output += \"\\n//# sourceMappingURL=\" + source_map_url;","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,57],[129,57]],"newRange":[[129,57],[130,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[130,0],[130,0]],"newRange":[[130,0],[130,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[128,4],[128,4]],"newRange":[[128,4],[129,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[129,0],[129,0]],"newRange":[[129,0],[129,4]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,4],[129,4]],"newRange":[[129,4],[129,5]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,5],[129,5]],"newRange":[[129,5],[129,6]],"oldText":"","newText":"f","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,6],[129,6]],"newRange":[[129,6],[129,8]],"oldText":"","newText":"()","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,7],[129,7]],"newRange":[[129,7],[129,8]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,8],[129,8]],"newRange":[[129,8],[129,9]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,9],[129,9]],"newRange":[[129,9],[129,10]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,10],[129,10]],"newRange":[[129,10],[129,11]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,11],[129,11]],"newRange":[[129,11],[129,12]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,12],[129,12]],"newRange":[[129,12],[129,13]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,13],[129,13]],"newRange":[[129,13],[129,14]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,14],[129,14]],"newRange":[[129,14],[129,15]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,15],[129,15]],"newRange":[[129,15],[129,16]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,16],[129,16]],"newRange":[[129,16],[129,17]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,17],[129,17]],"newRange":[[129,17],[129,18]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,18],[129,18]],"newRange":[[129,18],[129,19]],"oldText":"","newText":"S","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,19],[129,19]],"newRange":[[129,19],[129,20]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,20],[129,20]],"newRange":[[129,20],[129,21]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,21],[129,21]],"newRange":[[129,21],[129,22]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,22],[129,22]],"newRange":[[129,22],[129,23]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,23],[129,23]],"newRange":[[129,23],[129,24]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,24],[129,24]],"newRange":[[129,24],[129,25]],"oldText":"","newText":"M","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,25],[129,25]],"newRange":[[129,25],[129,26]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,26],[129,26]],"newRange":[[129,26],[129,27]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[129,28],[129,28]],"newRange":[[129,28],[129,30]],"oldText":"","newText":"{}","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[129,30],[129,30]]},"newParams":{"range":[[129,29],[129,30]]},"deserializer":"MarkerPatch"},{"oldRange":[[129,29],[129,30]],"newRange":[[129,29],[129,29]],"oldText":"}","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,4],[130,4]],"newRange":[[130,4],[130,8]],"oldText":"","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,61],[130,61]],"newRange":[[130,61],[131,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[131,0],[131,0]],"newRange":[[131,0],[131,8]],"oldText":"","newText":"        ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[131,8],[131,8]],"newRange":[[131,8],[131,9]],"oldText":"","newText":"}","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[131,0],[131,8]],"newRange":[[131,0],[131,4]],"oldText":"        ","newText":"    ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,14],[130,14]]},"newParams":{"range":[[130,13],[130,14]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,13],[130,14]],"newRange":[[130,13],[130,13]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,13],[130,13]]},"newParams":{"range":[[130,12],[130,13]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,12],[130,13]],"newRange":[[130,12],[130,12]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,12],[130,12]]},"newParams":{"range":[[130,11],[130,12]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,11],[130,12]],"newRange":[[130,11],[130,11]],"oldText":"p","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,11],[130,11]]},"newParams":{"range":[[130,10],[130,11]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,10],[130,11]],"newRange":[[130,10],[130,10]],"oldText":"t","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,10],[130,10]]},"newParams":{"range":[[130,9],[130,10]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,9],[130,10]],"newRange":[[130,9],[130,9]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,9],[130,9]]},"newParams":{"range":[[130,8],[130,9]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,8],[130,9]],"newRange":[[130,8],[130,8]],"oldText":"o","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,8],[130,8]],"newRange":[[130,8],[130,9]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,9],[130,9]],"newRange":[[130,9],[130,10]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,10],[130,10]],"newRange":[[130,10],[130,11]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,11],[130,11]],"newRange":[[130,11],[130,12]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,12],[130,12]],"newRange":[[130,12],[130,13]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,13],[130,13]],"newRange":[[130,13],[130,14]],"oldText":"","newText":"m","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,60],[130,60]]},"newParams":{"range":[[130,59],[130,60]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,59],[130,60]],"newRange":[[130,59],[130,59]],"oldText":"l","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,59],[130,59]]},"newParams":{"range":[[130,58],[130,59]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,58],[130,59]],"newRange":[[130,58],[130,58]],"oldText":"r","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,58],[130,58]]},"newParams":{"range":[[130,57],[130,58]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,57],[130,58]],"newRange":[[130,57],[130,57]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,57],[130,57]]},"newParams":{"range":[[130,56],[130,57]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,56],[130,57]],"newRange":[[130,56],[130,56]],"oldText":"_","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,56],[130,56]]},"newParams":{"range":[[130,55],[130,56]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,55],[130,56]],"newRange":[[130,55],[130,55]],"oldText":"p","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,55],[130,55]]},"newParams":{"range":[[130,54],[130,55]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,54],[130,55]],"newRange":[[130,54],[130,54]],"oldText":"a","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,54],[130,54]]},"newParams":{"range":[[130,53],[130,54]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,53],[130,54]],"newRange":[[130,53],[130,53]],"oldText":"m","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,53],[130,53]]},"newParams":{"range":[[130,52],[130,53]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,52],[130,53]],"newRange":[[130,52],[130,52]],"oldText":"_","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,52],[130,52]]},"newParams":{"range":[[130,51],[130,52]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,51],[130,52]],"newRange":[[130,51],[130,51]],"oldText":"e","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,51],[130,51]]},"newParams":{"range":[[130,50],[130,51]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,50],[130,51]],"newRange":[[130,50],[130,50]],"oldText":"c","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,50],[130,50]]},"newParams":{"range":[[130,49],[130,50]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,49],[130,50]],"newRange":[[130,49],[130,49]],"oldText":"r","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,49],[130,49]]},"newParams":{"range":[[130,48],[130,49]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,48],[130,49]],"newRange":[[130,48],[130,48]],"oldText":"u","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,48],[130,48]]},"newParams":{"range":[[130,47],[130,48]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,47],[130,48]],"newRange":[[130,47],[130,47]],"oldText":"o","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"range":[[130,47],[130,47]]},"newParams":{"range":[[130,46],[130,47]]},"deserializer":"MarkerPatch"},{"oldRange":[[130,46],[130,47]],"newRange":[[130,46],[130,46]],"oldText":"s","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,46],[130,46]],"newRange":[[130,46],[130,47]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,47],[130,47]],"newRange":[[130,47],[130,48]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,48],[130,48]],"newRange":[[130,48],[130,49]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,49],[130,49]],"newRange":[[130,49],[130,50]],"oldText":"","newText":"i","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,50],[130,50]],"newRange":[[130,50],[130,51]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,51],[130,51]],"newRange":[[130,51],[130,52]],"oldText":"","newText":"n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,52],[130,52]],"newRange":[[130,52],[130,53]],"oldText":"","newText":"s","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,53],[130,53]],"newRange":[[130,53],[130,54]],"oldText":"","newText":".","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,54],[130,54]],"newRange":[[130,54],[130,55]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,55],[130,55]],"newRange":[[130,55],[130,56]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,56],[130,56]],"newRange":[[130,56],[130,57]],"oldText":"","newText":"t","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,57],[130,57]],"newRange":[[130,57],[130,58]],"oldText":"","newText":"S","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,58],[130,58]],"newRange":[[130,58],[130,59]],"oldText":"","newText":"o","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,59],[130,59]],"newRange":[[130,59],[130,60]],"oldText":"","newText":"u","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,60],[130,60]],"newRange":[[130,60],[130,61]],"oldText":"","newText":"r","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,61],[130,61]],"newRange":[[130,61],[130,62]],"oldText":"","newText":"c","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,62],[130,62]],"newRange":[[130,62],[130,63]],"oldText":"","newText":"e","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,63],[130,63]],"newRange":[[130,63],[130,64]],"oldText":"","newText":"M","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,64],[130,64]],"newRange":[[130,64],[130,65]],"oldText":"","newText":"a","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,65],[130,65]],"newRange":[[130,65],[130,66]],"oldText":"","newText":"p","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[132,0],[132,4]],"newRange":[[132,0],[132,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"oldRange":[[128,0],[128,4]],"newRange":[[128,0],[128,0]],"oldText":"    ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"}],"redoStack":[{"patches":[{"oldRange":[[130,66],[130,67]],"newRange":[[130,66],[130,66]],"oldText":"+","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"oldRange":[[130,66],[130,66]],"newRange":[[130,66],[130,67]],"oldText":"","newText":"=","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[130,66],[130,67]]},"newParams":{"range":[[130,67],[130,67]]},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"oldRange":[[130,67],[130,67]],"newRange":[[130,67],[130,68]],"oldText":"","newText":"+","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[130,67],[130,68]]},"newParams":{"range":[[130,68],[130,68]]},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"oldRange":[[130,68],[130,68]],"newRange":[[130,68],[130,69]],"oldText":"","newText":" ","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[130,68],[130,69]]},"newParams":{"range":[[130,69],[130,69]]},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,68],[130,69]],"newRange":[[130,68],[130,68]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,67],[130,68]],"newRange":[[130,67],[130,67]],"oldText":"+","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,66],[130,67]],"newRange":[[130,66],[130,66]],"oldText":"=","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"oldRange":[[130,65],[130,66]],"newRange":[[130,65],[130,65]],"oldText":" ","newText":"","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"oldRange":[[130,65],[130,65]],"newRange":[[130,65],[130,66]],"oldText":"","newText":";","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[130,65],[130,66]]},"newParams":{"range":[[130,66],[130,66]]},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"},{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"oldRange":[[130,15],[130,15]],"newRange":[[130,15],[130,16]],"oldText":"","newText":"+","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[130,15],[130,16]]},"newParams":{"range":[[130,16],[130,16]]},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/UglifyJS2/tools/node.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"0fadcabc4bd56c3b7b8bd60499b26c32b552f248","deserializer":"TextBuffer"},{"text":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nfunction array_to_hash(a) {\n    var ret = Object.create(null);\n    for (var i = 0; i < a.length; ++i)\n        ret[a[i]] = true;\n    return ret;\n};\n\nfunction slice(a, start) {\n    return Array.prototype.slice.call(a, start || 0);\n};\n\nfunction characters(str) {\n    return str.split(\"\");\n};\n\nfunction member(name, array) {\n    for (var i = array.length; --i >= 0;)\n        if (array[i] == name)\n            return true;\n    return false;\n};\n\nfunction find_if(func, array) {\n    for (var i = 0, n = array.length; i < n; ++i) {\n        if (func(array[i]))\n            return array[i];\n    }\n};\n\nfunction repeat_string(str, i) {\n    if (i <= 0) return \"\";\n    if (i == 1) return str;\n    var d = repeat_string(str, i >> 1);\n    d += d;\n    if (i & 1) d += str;\n    return d;\n};\n\nfunction DefaultsError(msg, defs) {\n    Error.call(this, msg);\n    this.msg = msg;\n    this.defs = defs;\n};\nDefaultsError.prototype = Object.create(Error.prototype);\nDefaultsError.prototype.constructor = DefaultsError;\n\nDefaultsError.croak = function(msg, defs) {\n    throw new DefaultsError(msg, defs);\n};\n\nfunction defaults(args, defs, croak) {\n    if (args === true)\n        args = {};\n    var ret = args || {};\n    if (croak) for (var i in ret) if (ret.hasOwnProperty(i) && !defs.hasOwnProperty(i))\n        DefaultsError.croak(\"`\" + i + \"` is not a supported option\", defs);\n    for (var i in defs) if (defs.hasOwnProperty(i)) {\n        ret[i] = (args && args.hasOwnProperty(i)) ? args[i] : defs[i];\n    }\n    return ret;\n};\n\nfunction merge(obj, ext) {\n    for (var i in ext) if (ext.hasOwnProperty(i)) {\n        obj[i] = ext[i];\n    }\n    return obj;\n};\n\nfunction noop() {};\n\nvar MAP = (function(){\n    function MAP(a, f, backwards) {\n        var ret = [], top = [], i;\n        function doit() {\n            var val = f(a[i], i);\n            var is_last = val instanceof Last;\n            if (is_last) val = val.v;\n            if (val instanceof AtTop) {\n                val = val.v;\n                if (val instanceof Splice) {\n                    top.push.apply(top, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    top.push(val);\n                }\n            }\n            else if (val !== skip) {\n                if (val instanceof Splice) {\n                    ret.push.apply(ret, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    ret.push(val);\n                }\n            }\n            return is_last;\n        };\n        if (a instanceof Array) {\n            if (backwards) {\n                for (i = a.length; --i >= 0;) if (doit()) break;\n                ret.reverse();\n                top.reverse();\n            } else {\n                for (i = 0; i < a.length; ++i) if (doit()) break;\n            }\n        }\n        else {\n            for (i in a) if (a.hasOwnProperty(i)) if (doit()) break;\n        }\n        return top.concat(ret);\n    };\n    MAP.at_top = function(val) { return new AtTop(val) };\n    MAP.splice = function(val) { return new Splice(val) };\n    MAP.last = function(val) { return new Last(val) };\n    var skip = MAP.skip = {};\n    function AtTop(val) { this.v = val };\n    function Splice(val) { this.v = val };\n    function Last(val) { this.v = val };\n    return MAP;\n})();\n\nfunction push_uniq(array, el) {\n    if (array.indexOf(el) < 0)\n        array.push(el);\n};\n\nfunction string_template(text, props) {\n    return text.replace(/\\{(.+?)\\}/g, function(str, p){\n        return props[p];\n    });\n};\n\nfunction remove(array, el) {\n    for (var i = array.length; --i >= 0;) {\n        if (array[i] === el) array.splice(i, 1);\n    }\n};\n\nfunction mergeSort(array, cmp) {\n    if (array.length < 2) return array.slice();\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            cmp(a[ai], b[bi]) <= 0\n                ? r[i++] = a[ai++]\n                : r[i++] = b[bi++];\n        }\n        if (ai < a.length) r.push.apply(r, a.slice(ai));\n        if (bi < b.length) r.push.apply(r, b.slice(bi));\n        return r;\n    };\n    function _ms(a) {\n        if (a.length <= 1)\n            return a;\n        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);\n        left = _ms(left);\n        right = _ms(right);\n        return merge(left, right);\n    };\n    return _ms(array);\n};\n\nfunction set_difference(a, b) {\n    return a.filter(function(el){\n        return b.indexOf(el) < 0;\n    });\n};\n\nfunction set_intersection(a, b) {\n    return a.filter(function(el){\n        return b.indexOf(el) >= 0;\n    });\n};\n\n// this function is taken from Acorn [1], written by Marijn Haverbeke\n// [1] https://github.com/marijnh/acorn\nfunction makePredicate(words) {\n    if (!(words instanceof Array)) words = words.split(\" \");\n    var f = \"\", cats = [];\n    out: for (var i = 0; i < words.length; ++i) {\n        for (var j = 0; j < cats.length; ++j)\n            if (cats[j][0].length == words[i].length) {\n                cats[j].push(words[i]);\n                continue out;\n            }\n        cats.push([words[i]]);\n    }\n    function compareTo(arr) {\n        if (arr.length == 1) return f += \"return str === \" + JSON.stringify(arr[0]) + \";\";\n        f += \"switch(str){\";\n        for (var i = 0; i < arr.length; ++i) f += \"case \" + JSON.stringify(arr[i]) + \":\";\n        f += \"return true}return false;\";\n    }\n    // When there are more than three length categories, an outer\n    // switch first dispatches on the lengths, to save on comparisons.\n    if (cats.length > 3) {\n        cats.sort(function(a, b) {return b.length - a.length;});\n        f += \"switch(str.length){\";\n        for (var i = 0; i < cats.length; ++i) {\n            var cat = cats[i];\n            f += \"case \" + cat[0].length + \":\";\n            compareTo(cat);\n        }\n        f += \"}\";\n        // Otherwise, simply generate a flat `switch` statement.\n    } else {\n        compareTo(words);\n    }\n    return new Function(\"str\", f);\n};\n\nfunction all(array, predicate) {\n    for (var i = array.length; --i >= 0;)\n        if (!predicate(array[i]))\n            return false;\n    return true;\n};\n\nfunction Dictionary() {\n    this._values = Object.create(null);\n    this._size = 0;\n};\nDictionary.prototype = {\n    set: function(key, val) {\n        if (!this.has(key)) ++this._size;\n        this._values[\"$\" + key] = val;\n        return this;\n    },\n    add: function(key, val) {\n        if (this.has(key)) {\n            this.get(key).push(val);\n        } else {\n            this.set(key, [ val ]);\n        }\n        return this;\n    },\n    get: function(key) { return this._values[\"$\" + key] },\n    del: function(key) {\n        if (this.has(key)) {\n            --this._size;\n            delete this._values[\"$\" + key];\n        }\n        return this;\n    },\n    has: function(key) { return (\"$\" + key) in this._values },\n    each: function(f) {\n        for (var i in this._values)\n            f(this._values[i], i.substr(1));\n    },\n    size: function() {\n        return this._size;\n    },\n    map: function(f) {\n        var ret = [];\n        for (var i in this._values)\n            ret.push(f(this._values[i], i.substr(1)));\n        return ret;\n    }\n};\n","markers":{"markers":{"1":{"id":1,"range":[[107,14],[107,14]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":53,"goalBufferRange":null,"autoscroll":true,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/UglifyJS2/lib/utils.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"bf414abed6bb41b2de3c0fbc6c542b55cadc54d9","deserializer":"TextBuffer"},{"text":"#! /usr/bin/env node\n// -*- js -*-\n\n\"use strict\";\n\nvar UglifyJS = require(\"../tools/node\");\nvar sys = require(\"util\");\nvar optimist = require(\"optimist\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar async = require(\"async\");\nvar acorn;\nvar ARGS = optimist\n    .usage(\"$0 input1.js [input2.js ...] [options]\\n\\\nUse a single dash to read input from the standard input.\\\n\\n\\n\\\nNOTE: by default there is no mangling/compression.\\n\\\nWithout [options] it will simply parse input files and dump the AST\\n\\\nwith whitespace and comments discarded.  To achieve compression and\\n\\\nmangling you need to use `-c` and `-m`.\\\n\")\n    .describe(\"source-map\", \"Specify an output file where to generate source map.\")\n    .describe(\"source-map-root\", \"The path to the original source to be included in the source map.\")\n    .describe(\"source-map-url\", \"The path to the source map to be added in //# sourceMappingURL.  Defaults to the value passed with --source-map.\")\n    .describe(\"source-map-include-sources\", \"Pass this flag if you want to include the content of source files in the source map as sourcesContent property.\")\n    .describe(\"in-source-map\", \"Input source map, useful if you're compressing JS that was generated from some other original code.\")\n    .describe(\"screw-ie8\", \"Pass this flag if you don't care about full compliance with Internet Explorer 6-8 quirks (by default UglifyJS will try to be IE-proof).\")\n    .describe(\"expr\", \"Parse a single expression, rather than a program (for parsing JSON)\")\n    .describe(\"p\", \"Skip prefix for original filenames that appear in source maps. \\\nFor example -p 3 will drop 3 directories from file names and ensure they are relative paths. \\\nYou can also specify -p relative, which will make UglifyJS figure out itself the relative paths between original sources, \\\nthe source map and the output file.\")\n    .describe(\"o\", \"Output file (default STDOUT).\")\n    .describe(\"b\", \"Beautify output/specify output options.\")\n    .describe(\"m\", \"Mangle names/pass mangler options.\")\n    .describe(\"r\", \"Reserved names to exclude from mangling.\")\n    .describe(\"c\", \"Enable compressor/pass compressor options. \\\nPass options like -c hoist_vars=false,if_return=false. \\\nUse -c with no argument to use the default compression options.\")\n    .describe(\"d\", \"Global definitions\")\n    .describe(\"e\", \"Embed everything in a big function, with a configurable parameter/argument list.\")\n\n    .describe(\"comments\", \"Preserve copyright comments in the output. \\\nBy default this works like Google Closure, keeping JSDoc-style comments that contain \\\"@license\\\" or \\\"@preserve\\\". \\\nYou can optionally pass one of the following arguments to this flag:\\n\\\n- \\\"all\\\" to keep all comments\\n\\\n- a valid JS regexp (needs to start with a slash) to keep only comments that match.\\n\\\n\\\nNote that currently not *all* comments can be kept when compression is on, \\\nbecause of dead code removal or cascading statements into sequences.\")\n\n    .describe(\"preamble\", \"Preamble to prepend to the output.  You can use this to insert a \\\ncomment, for example for licensing information.  This will not be \\\nparsed, but the source map will adjust for its presence.\")\n\n    .describe(\"stats\", \"Display operations run time on STDERR.\")\n    .describe(\"acorn\", \"Use Acorn for parsing.\")\n    .describe(\"spidermonkey\", \"Assume input files are SpiderMonkey AST format (as JSON).\")\n    .describe(\"self\", \"Build itself (UglifyJS2) as a library (implies --wrap=UglifyJS --export-all)\")\n    .describe(\"wrap\", \"Embed everything in a big function, making the “exports” and “global” variables available. \\\nYou need to pass an argument to this option to specify the name that your module will take when included in, say, a browser.\")\n    .describe(\"export-all\", \"Only used when --wrap, this tells UglifyJS to add code to automatically export all globals.\")\n    .describe(\"lint\", \"Display some scope warnings\")\n    .describe(\"v\", \"Verbose\")\n    .describe(\"V\", \"Print version number and exit.\")\n    .describe(\"noerr\", \"Don't throw an error for unknown options in -c, -b or -m.\")\n\n    .alias(\"p\", \"prefix\")\n    .alias(\"o\", \"output\")\n    .alias(\"v\", \"verbose\")\n    .alias(\"b\", \"beautify\")\n    .alias(\"m\", \"mangle\")\n    .alias(\"c\", \"compress\")\n    .alias(\"d\", \"define\")\n    .alias(\"r\", \"reserved\")\n    .alias(\"V\", \"version\")\n    .alias(\"e\", \"enclose\")\n\n    .string(\"source-map\")\n    .string(\"source-map-root\")\n    .string(\"source-map-url\")\n    .string(\"b\")\n    .string(\"m\")\n    .string(\"c\")\n    .string(\"d\")\n    .string(\"e\")\n    .string(\"comments\")\n    .string(\"wrap\")\n    .string(\"p\")\n\n    .boolean(\"expr\")\n    .boolean(\"source-map-include-sources\")\n    .boolean(\"screw-ie8\")\n    .boolean(\"export-all\")\n    .boolean(\"self\")\n    .boolean(\"v\")\n    .boolean(\"stats\")\n    .boolean(\"acorn\")\n    .boolean(\"spidermonkey\")\n    .boolean(\"lint\")\n    .boolean(\"V\")\n    .boolean(\"noerr\")\n\n    .wrap(80)\n\n    .argv\n;\n\nnormalize(ARGS);\n\nif (ARGS.noerr) {\n    UglifyJS.DefaultsError.croak = function(msg, defs) {\n        sys.error(\"WARN: \" + msg);\n    };\n}\n\nif (ARGS.version || ARGS.V) {\n    var json = require(\"../package.json\");\n    sys.puts(json.name + ' ' + json.version);\n    process.exit(0);\n}\n\nif (ARGS.ast_help) {\n    var desc = UglifyJS.describe_ast();\n    sys.puts(typeof desc == \"string\" ? desc : JSON.stringify(desc, null, 2));\n    process.exit(0);\n}\n\nif (ARGS.h || ARGS.help) {\n    sys.puts(optimist.help());\n    process.exit(0);\n}\n\nif (ARGS.acorn) {\n    acorn = require(\"acorn\");\n}\n\nvar COMPRESS = getOptions(\"c\", true);\nvar MANGLE = getOptions(\"m\", true);\nvar BEAUTIFY = getOptions(\"b\", true);\n\nif (ARGS.d) {\n    if (COMPRESS) COMPRESS.global_defs = getOptions(\"d\");\n}\n\nif (ARGS.r) {\n    if (MANGLE) MANGLE.except = ARGS.r.replace(/^\\s+|\\s+$/g).split(/\\s*,+\\s*/);\n}\n\nvar OUTPUT_OPTIONS = {\n    beautify: BEAUTIFY ? true : false,\n    preamble: ARGS.preamble || null,\n};\n\nif (ARGS.screw_ie8) {\n    if (COMPRESS) COMPRESS.screw_ie8 = true;\n    if (MANGLE) MANGLE.screw_ie8 = true;\n    OUTPUT_OPTIONS.screw_ie8 = true;\n}\n\nif (BEAUTIFY)\n    UglifyJS.merge(OUTPUT_OPTIONS, BEAUTIFY);\n\nif (ARGS.comments) {\n    if (/^\\//.test(ARGS.comments)) {\n        OUTPUT_OPTIONS.comments = new Function(\"return(\" + ARGS.comments + \")\")();\n    } else if (ARGS.comments == \"all\") {\n        OUTPUT_OPTIONS.comments = true;\n    } else {\n        OUTPUT_OPTIONS.comments = function(node, comment) {\n            var text = comment.value;\n            var type = comment.type;\n            if (type == \"comment2\") {\n                // multiline comment\n                return /@preserve|@license|@cc_on/i.test(text);\n            }\n        }\n    }\n}\n\nvar files = ARGS._.slice();\n\nif (ARGS.self) {\n    if (files.length > 0) {\n        sys.error(\"WARN: Ignoring input files since --self was passed\");\n    }\n    files = UglifyJS.FILES;\n    if (!ARGS.wrap) ARGS.wrap = \"UglifyJS\";\n    ARGS.export_all = true;\n}\n\nvar ORIG_MAP = ARGS.in_source_map;\n\nif (ORIG_MAP) {\n    ORIG_MAP = JSON.parse(fs.readFileSync(ORIG_MAP));\n    if (files.length == 0) {\n        sys.error(\"INFO: Using file from the input source map: \" + ORIG_MAP.file);\n        files = [ ORIG_MAP.file ];\n    }\n    if (ARGS.source_map_root == null) {\n        ARGS.source_map_root = ORIG_MAP.sourceRoot;\n    }\n}\n\nif (files.length == 0) {\n    files = [ \"-\" ];\n}\n\nif (files.indexOf(\"-\") >= 0 && ARGS.source_map) {\n    sys.error(\"ERROR: Source map doesn't work with input from STDIN\");\n    process.exit(1);\n}\n\nif (files.filter(function(el){ return el == \"-\" }).length > 1) {\n    sys.error(\"ERROR: Can read a single file from STDIN (two or more dashes specified)\");\n    process.exit(1);\n}\n\nvar STATS = {};\nvar OUTPUT_FILE = ARGS.o;\nvar TOPLEVEL = null;\nvar P_RELATIVE = ARGS.p && ARGS.p == \"relative\";\nvar SOURCES_CONTENT = {};\n\nvar SOURCE_MAP = ARGS.source_map ? UglifyJS.SourceMap({\n    file: P_RELATIVE ? path.relative(path.dirname(ARGS.source_map), OUTPUT_FILE) : OUTPUT_FILE,\n    root: ARGS.source_map_root,\n    orig: ORIG_MAP,\n}) : null;\n\nOUTPUT_OPTIONS.source_map = SOURCE_MAP;\n\ntry {\n    var output = UglifyJS.OutputStream(OUTPUT_OPTIONS);\n    var compressor = COMPRESS && UglifyJS.Compressor(COMPRESS);\n} catch(ex) {\n    if (ex instanceof UglifyJS.DefaultsError) {\n        sys.error(ex.msg);\n        sys.error(\"Supported options:\");\n        sys.error(sys.inspect(ex.defs));\n        process.exit(1);\n    }\n}\n\nasync.eachLimit(files, 1, function (file, cb) {\n    read_whole_file(file, function (err, code) {\n        if (err) {\n            sys.error(\"ERROR: can't read file: \" + file);\n            process.exit(1);\n        }\n        if (ARGS.p != null) {\n            if (P_RELATIVE) {\n                file = path.relative(path.dirname(ARGS.source_map), file);\n            } else {\n                var p = parseInt(ARGS.p, 10);\n                if (!isNaN(p)) {\n                    file = file.replace(/^\\/+/, \"\").split(/\\/+/).slice(ARGS.p).join(\"/\");\n                }\n            }\n        }\n        SOURCES_CONTENT[file] = code;\n        time_it(\"parse\", function(){\n            if (ARGS.spidermonkey) {\n                var program = JSON.parse(code);\n                if (!TOPLEVEL) TOPLEVEL = program;\n                else TOPLEVEL.body = TOPLEVEL.body.concat(program.body);\n            }\n            else if (ARGS.acorn) {\n                TOPLEVEL = acorn.parse(code, {\n                    locations     : true,\n                    sourceFile    : file,\n                    program       : TOPLEVEL\n                });\n            }\n            else {\n                try {\n                    TOPLEVEL = UglifyJS.parse(code, {\n                        filename   : file,\n                        toplevel   : TOPLEVEL,\n                        expression : ARGS.expr,\n                    });\n                } catch(ex) {\n                    if (ex instanceof UglifyJS.JS_Parse_Error) {\n                        sys.error(\"Parse error at \" + file + \":\" + ex.line + \",\" + ex.col);\n                        sys.error(ex.message);\n                        sys.error(ex.stack);\n                        process.exit(1);\n                    }\n                    throw ex;\n                }\n            };\n        });\n        cb();\n    });\n}, function () {\n    if (ARGS.acorn || ARGS.spidermonkey) time_it(\"convert_ast\", function(){\n        TOPLEVEL = UglifyJS.AST_Node.from_mozilla_ast(TOPLEVEL);\n    });\n\n    if (ARGS.wrap) {\n        TOPLEVEL = TOPLEVEL.wrap_commonjs(ARGS.wrap, ARGS.export_all);\n    }\n\n    if (ARGS.enclose) {\n        var arg_parameter_list = ARGS.enclose;\n        if (arg_parameter_list === true) {\n            arg_parameter_list = [];\n        }\n        else if (!(arg_parameter_list instanceof Array)) {\n            arg_parameter_list = [arg_parameter_list];\n        }\n        TOPLEVEL = TOPLEVEL.wrap_enclose(arg_parameter_list);\n    }\n\n    var SCOPE_IS_NEEDED = COMPRESS || MANGLE || ARGS.lint;\n\n    if (SCOPE_IS_NEEDED) {\n        time_it(\"scope\", function(){\n            TOPLEVEL.figure_out_scope({ screw_ie8: ARGS.screw_ie8 });\n            if (ARGS.lint) {\n                TOPLEVEL.scope_warnings();\n            }\n        });\n    }\n\n    if (COMPRESS) {\n        time_it(\"squeeze\", function(){\n            TOPLEVEL = TOPLEVEL.transform(compressor);\n        });\n    }\n\n    if (SCOPE_IS_NEEDED) {\n        time_it(\"scope\", function(){\n            TOPLEVEL.figure_out_scope({ screw_ie8: ARGS.screw_ie8 });\n            if (MANGLE) {\n                TOPLEVEL.compute_char_frequency(MANGLE);\n            }\n        });\n    }\n\n    if (MANGLE) time_it(\"mangle\", function(){\n        TOPLEVEL.mangle_names(MANGLE);\n    });\n\n    if (ARGS.source_map_include_sources) {\n        for (var file in SOURCES_CONTENT) {\n            if (SOURCES_CONTENT.hasOwnProperty(file)) {\n                SOURCE_MAP.get().setSourceContent(file, SOURCES_CONTENT[file]);\n            }\n        }\n    }\n\n    time_it(\"generate\", function(){\n        TOPLEVEL.print(output);\n    });\n\n    output = output.get();\n\n    if (SOURCE_MAP) {\n        fs.writeFileSync(ARGS.source_map, SOURCE_MAP, \"utf8\");\n        var source_map_url = ARGS.source_map_url || (\n            P_RELATIVE\n                ? path.relative(path.dirname(OUTPUT_FILE), ARGS.source_map)\n                : ARGS.source_map\n        );\n        output += \"\\n//# sourceMappingURL=\" + source_map_url;\n    }\n\n    if (OUTPUT_FILE) {\n        fs.writeFileSync(OUTPUT_FILE, output, \"utf8\");\n    } else {\n        sys.print(output);\n    }\n\n    if (ARGS.stats) {\n        sys.error(UglifyJS.string_template(\"Timing information (compressed {count} files):\", {\n            count: files.length\n        }));\n        for (var i in STATS) if (STATS.hasOwnProperty(i)) {\n            sys.error(UglifyJS.string_template(\"- {name}: {time}s\", {\n                name: i,\n                time: (STATS[i] / 1000).toFixed(3)\n            }));\n        }\n    }\n});\n\n/* -----[ functions ]----- */\n\nfunction normalize(o) {\n    for (var i in o) if (o.hasOwnProperty(i) && /-/.test(i)) {\n        o[i.replace(/-/g, \"_\")] = o[i];\n        delete o[i];\n    }\n}\n\nfunction getOptions(x, constants) {\n    x = ARGS[x];\n    if (!x) return null;\n    var ret = {};\n    if (x !== true) {\n        var ast;\n        try {\n            ast = UglifyJS.parse(x, { expression: true });\n        } catch(ex) {\n            if (ex instanceof UglifyJS.JS_Parse_Error) {\n                sys.error(\"Error parsing arguments in: \" + x);\n                process.exit(1);\n            }\n        }\n        ast.walk(new UglifyJS.TreeWalker(function(node){\n            if (node instanceof UglifyJS.AST_Seq) return; // descend\n            if (node instanceof UglifyJS.AST_Assign) {\n                var name = node.left.print_to_string({ beautify: false }).replace(/-/g, \"_\");\n                var value = node.right;\n                if (constants)\n                    value = new Function(\"return (\" + value.print_to_string() + \")\")();\n                ret[name] = value;\n                return true;    // no descend\n            }\n            if (node instanceof UglifyJS.AST_Symbol || node instanceof UglifyJS.AST_Binary) {\n                var name = node.print_to_string({ beautify: false }).replace(/-/g, \"_\");\n                ret[name] = true;\n                return true;    // no descend\n            }\n            sys.error(node.TYPE)\n            sys.error(\"Error parsing arguments in: \" + x);\n            process.exit(1);\n        }));\n    }\n    return ret;\n}\n\nfunction read_whole_file(filename, cb) {\n    if (filename == \"-\") {\n        var chunks = [];\n        process.stdin.setEncoding('utf-8');\n        process.stdin.on('data', function (chunk) {\n            chunks.push(chunk);\n        }).on('end', function () {\n            cb(null, chunks.join(\"\"));\n        });\n        process.openStdin();\n    } else {\n        fs.readFile(filename, \"utf-8\", cb);\n    }\n}\n\nfunction time_it(name, cont) {\n    var t1 = new Date().getTime();\n    var ret = cont();\n    if (ARGS.stats) {\n        var spent = new Date().getTime() - t1;\n        if (STATS[name]) STATS[name] += spent;\n        else STATS[name] = spent;\n    }\n    return ret;\n}\n","markers":{"markers":{"1":{"id":1,"range":[[365,8],[365,61]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":85,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/UglifyJS2/bin/uglifyjs","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"47a3f2f8d74df0283ea0268896f854ea9df340b5","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":23,"softTabs":true,"scrollTop":1849,"scrollLeft":0,"displayBuffer":{"id":24,"softWrap":false,"editorWidthInChars":146,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/UglifyJS2/tools/node.js","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":85,"softTabs":true,"scrollTop":5604,"scrollLeft":0,"displayBuffer":{"id":86,"softWrap":false,"editorWidthInChars":152,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/UglifyJS2/bin/uglifyjs","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":53,"softTabs":true,"scrollTop":1449,"scrollLeft":0,"displayBuffer":{"id":54,"softWrap":false,"editorWidthInChars":115,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/UglifyJS2/lib/utils.js","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/will/Documents/workspace/UglifyJS2/tools/node.js","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"find-and-replace":{"viewState":{"findHistory":["UglifyJS.merge","merge"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["minify","merge","sourceMappingUrl"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/Users/will/Documents/workspace/UglifyJS2/tools/node.js":1397228437391,"/Users/will/Documents/workspace/UglifyJS2/lib/utils.js":1397209052874,"/Users/will/Documents/workspace/UglifyJS2/bin/uglifyjs":1397228404450},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":730119},"tree-view":{"directoryExpansionStates":{"lib":{},"tools":{}},"selectedPath":"/Users/will/Documents/workspace/UglifyJS2/tools/node.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}