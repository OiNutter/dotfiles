{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1280,"height":774},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/will/Documents/workspace/Obscura","buffers":[{"text":"#set up global object\nroot = exports ? this\n\t\t\nobscura = (img,target=null) ->\n\n\t###\n\tinternal variables\n\t###\n\tfileRegExp = /\\.((jp(e)?g)|(png)|(gif))$/i\n\t@onLoad = =>\n\t\treturn true\n\t\t\n\t###\n\tSet up local variables with image data from source\n\t###\n\t@setUpImageData = =>\n\t\t@dimensions = \n\t\t\t\tw:@image.width\n\t\t\t\th:@image.height\n\t\t@imageDimensions = @dimensions\n\t\t@canvas.width = @canvas.height = if @dimensions.w>@dimensions.h then @dimensions.w*2 else @dimensions.h*2\n\t\t\n\t\t#initial load of image\n\t\t@load(0,0,@image.width,@image.height,@image);\n\t\t\n\t###\n\tload image\n\t###\n\t@load =(x=0,y=0,w=@image.width,h=@image.height,image=@target)=>\n\t\t@context.globalCompositeOperation = \"copy\"\n\t\t@context.drawImage(image,0,0,@imageDimensions.w,@imageDimensions.h,x,y,w,h)\n\t\t@imageDimensions = {w,h}\n\t\t@render()\n\t\treturn @\n\t\n\t###\n\trender edited image to target\n\t###\n\t@render = =>\n\t\t@target.width = @dimensions.w\n\t\t@target.height = @dimensions.h\n\t\t@target.getContext('2d').globalCompositeOperation = \"copy\"\n\t\t@target.getContext('2d').drawImage(@canvas,0,0)\n\t\t@context.clearRect(0,0,@canvas.width,@canvas.height)\n\t\treturn @\n\t\n\t###\n\tConvert image to base64 encoded string for saving to server\n\t###\n\t@save = => \n\t\treturn @target.toDataURL()\n\t\t\n\t###\n\tresizes an image\n\t###\t\n\t@resize = (scale,keepProportions=true,crop=false) =>\n\t\t@context.save()\n\t\t#check type of scale and convert it to an object if not already\n\t\tif Object.prototype.toString.call(scale) is '[object Array]'\n\t\t\tscale = \n\t\t\t\tw: scale[0]\n\t\t\t\th:scale[1]\n\t\telse if typeof scale isnt 'object'\n\t\t\tscale = \n\t\t\t\tw:scale\n\t\t\t\th:scale\n\t\t\t\t\n\t\t#convert percentages to actual values\n\t\tscale.w = if typeof scale.w is 'string' and scale.w.match(/%/) then @dimensions.w * (parseFloat(scale.w)/100) else parseFloat(scale.w) \n\t\tscale.h = if typeof scale.h is 'string' and scale.h.match(/%/) then @dimensions.h * (parseFloat(scale.h)/100) else parseFloat(scale.h)\n\t\t\n\t\tcurrentDimensions = @dimensions\n\t\t@dimensions = scale\n\t\t\n\t\tnewScale = scale\n\t\t#if keepProportions force stop image distorting\n\t\tif keepProportions\n\t\t\tif scale.w > scale.h or (scale.w is scale.h and currentDimensions.w > currentDimensions.h)\n\t\t\t\tnewScale.w = scale.w\n\t\t\t\tnewScale.h = (scale.w/currentDimensions.w)*currentDimensions.h\n\t\t\telse if scale.h>scale.w or (scale.h is scale.w and currentDimensions.h > currentDimensions.w)\n\t\t\t\tnewScale.w = (scale.h/currentDimensions.h)*currentDimensions.w\n\t\t\t\tnewScale.h = scale.h\n\t\t\t\t\n\t\t\t@dimensions = newScale unless crop\n\t\t\t\t\t\t\n\t\t@context.drawImage(@target,0,0,newScale.w,newScale.h)\n\t\t@render()\n\t\t@imageDimensions = @dimensions\n\t\t@context.restore()\n\t\treturn @\n\t\n\t###\n\tCrops an image\n\t###\n\t@crop = (x,y,w,h) =>\n\t\t@context.save()\n\t\tsize = @dimensions\n\t\t@dimensions = {w,h}\n\t\t@context.drawImage(@target,x,y,w,h,0,0,w,h)\n\t\t@imageDimensions = {w,h}\n\t\t@render()\n\t\t@context.restore()\n\t\treturn @\n\t\t\n\t###\n\tResizes an image to fit completely into a given space\n\t###\n\t@fit = (w,h) =>\n\t\t@context.save()\n\t\treturn @ if w>@canvas.width and h>@canvas.height\n\t\t\t\t\t\t\n\t\tif w<h or @imageDimensions.w > @imageDimensions.h or (w is h and @imageDimensions.h > @imageDimensions.w)\n\t\t\th = (w/@imageDimensions.w)*@imageDimensions.h\n\t\telse if h<w or @imageDimensions.h>@imageDimensions.w or (h is w and @imageDimensions.w > @imageDimensions.h)\n\t\t\tw = (h/@imageDimensions.h)*@imageDimensions.w;\n\t\t\n\t\t@dimensions = {w,h}\n\t\t@context.drawImage(@target,0,0,w,h)\n\t\t@imageDimensions = @dimensions\n\t\t@render()\n\t\t@context.restore()\n\t\treturn @\n\t\n\t###\n\tRotates an image\n\t###\n\t@rotate = (angle,center='center') =>\n\t\t@context.restore();\n\t\t@context.save();\n\t\t{w,h}=@dimensions\n\t\tif angle is 90 or angle is 120\n\t\t\t{cw,ch} = {h,w}\n\t\telse if angle isnt 180 or angle isnt 360 \t\n\t\t\tcw = w*Math.cos(angle * Math.PI/180) + h*Math.sin(angle * Math.PI/180)\n\t\t\tch = h*Math.cos(angle * Math.PI/180) + w*Math.sin(angle * Math.PI/180)\n\t\t\t\n\t\t@context.globalCompositeOperation = \"copy\";\n\t\t\t\t\n\t\tif typeof center isnt 'object'\n\t\t\tif center.match(/(top)/)\n\t\t\t\ty = 0\n\t\t\t\ty2 = (ch-h)/2\n\t\t\telse if center.match(/(bottom)/)\n\t\t\t\ty = ch\n\t\t\t\ty2 = ch - (ch-h)/2\n\t\t\telse if center.match(/(center)/)\n\t\t\t\ty = ch/2\n\t\t\t\ty2 = h/2\n\t\t\t\t\n\t\t\tif center.match(/(left)/)\n\t\t\t\tx = 0\n\t\t\t\tx2 = (cw-w)/2\n\t\t\telse if center.match(/(middle)/)\n\t\t\t\tx = cw\n\t\t\t\tx2 = cw - (cw-w)/2\n\t\t\telse if center.match(/(center)/)\n\t\t\t\tx = cw/2\n\t\t\t\tx2 = w/2\n\n\t\t@dimensions.w = cw\n\t\t@dimensions.h = ch\n\t\t@context.translate(x,y)\n\t\t@context.rotate(angle * Math.PI/180)\n\t\t@context.clearRect(0,0,@canvas.width,@canvas.height)\n\t\t@context.drawImage(@target,0,0,w,h,-x2,-y2,w,h)\n\t\t\n\t\t@imageDimensions = @dimensions\n\t\t@context.restore()\n\t\t@render()\n\t\treturn @\n\t\t\n\t###\n\tFlips an image\n\t###\n\t@flip = (direction='horizontal')=>\n\t\t@context.save()\n\t\tif direction is 'horizontal'\n\t\t\t@context.translate(@dimensions.w, 0);\n\t\t\t@context.scale(-1,1) \n\t\telse \n\t\t\t@context.translate(0,@dimensions.h);\n\t\t\t@context.scale(1,-1)\n\t\t\n\t\t@context.drawImage(@target,0,0)\n\t\t@context.restore()\n\t\t@render()\n\t\treturn @\n\t\t\n\t###\n\tReflection\n\t###\n\t@reflect = (alphaStart=0.5,gap=0,reflectionAmount=0.25,direction = 'vertical')=>\n    @context.save()\n    gradientCanvas = document.createElement('canvas')\n    gradientCanvas.width = @imageDimensions.w\n    gradientCanvas.height = @imageDimensions.h\n    \n    gradientContext = gradientCanvas.getContext('2d')\n    \n    @context.globalCompositeOperation = 'source-over'\n    \n    startPos = \n      x:0\n      y:0\n    \n    targetPos =\n      x:0\n      y:0\n      \n    {w,h} = @imageDimensions\n    @context.drawImage(@target,0,0)\n    if direction is 'vertical'\n      h = @imageDimensions.h * reflectionAmount\n      @dimensions.h = @imageDimensions.h + gap + h\n      gradientContext.translate(0,h)\n      gradientContext.scale(1,-1)\n      @context.translate(0,h)\n      @context.scale(1,-1)\n      targetPos.y = @dimensions.h\n      startPos.y = @imageDimensions.h-h\n      \n    gradientImageData = gradientContext.getImageData(0, 0, w, h);\n    \n    gradientContext.drawImage(@target,startPos.x,startPos.y,w,h,0,0,w,h)\n    \n    imageData = @context.getImageData(0,0,w,h)\n    reflectionImageData = gradientContext.getImageData(0,0,w,h)\n    opacity=1\n    \n    col = 1\n    row = 1;\n    alphaStep = (255*alphaStart)/h\n    until row > h\n      until col > w\n        alpha = reflectionImageData.data[((row*(w*4)) + (col*4)) + 3]\n        alpha = Math.min(alpha,((h-(row-1))*alphaStep))\n        reflectionImageData.data[((row*(w*4)) + (col*4)) + 3] = alpha\n        col++\n      col=1\n      row++\n      \n    @context.putImageData(reflectionImageData, 0,@imageDimensions.h)\n    \n    @imageDimensions = @dimensions\n    \n    \n    @render()\n    @context.restore()\n    return @\n\t\t\n\t#load element\n\t@target = if target isnt null then document.querySelector(target) else document.createElement('canvas')\n\t@canvas = document.createElement('canvas')\n\t@context = @canvas.getContext('2d')\n\t\n\tif img.match(fileRegExp)\n\t\t@image = new Image()\n\t\t@image.onload = =>\n\t\t\t@setUpImageData()\n\t\t\t@onLoad()\n\t\t@image.src = img\n\telse\n\t\t@image = document.querySelector(img)\n\t\t@setUpImageData()\n\t\n\treturn this\n\t\t\t\t\nroot.obscura = obscura","markers":{"markers":{"1":{"id":1,"range":[[12,4],[12,4]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":17,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/will/Documents/workspace/Obscura/src/coffee/obscura.coffee","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f0b3be5c6ae8e59e324103c4ee286990b156ab3d","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":17,"softTabs":false,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":18,"softWrap":false,"editorWidthInChars":152,"tokenizedBuffer":{"bufferPath":"/Users/will/Documents/workspace/Obscura/src/coffee/obscura.coffee","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/will/Documents/workspace/Obscura/src/coffee/obscura.coffee","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"symbol-gen":{},"fuzzy-finder":{"/Users/will/Documents/workspace/Obscura/src/coffee/obscura.coffee":1396087003417},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":427663},"tree-view":{"directoryExpansionStates":{"src":{"coffee":{}}},"selectedPath":"/Users/will/Documents/workspace/Obscura/src/coffee/obscura.coffee","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}